PRZYKŁADOWE KOLOKWIUM

# Zad 1

def print_unique_values(list):
    unique_values = []
    for value in list:
        if value not in unique_values:
            unique_values.append(value)
            print(value)

list = [7,8,1,2,3,4,9]
print_unique_values(list)

# Zad 2

word = "Jade sobie rowerem przez miasto"
word = word.replace(" ", "")
word = ''.join(filter(str.isalpha, word))
reversed_word = word[::-1]
for i in range(3, len(word), 4):
    print(reversed_word[i])

# Zad 3

def fibonacci_recursive(n):
    if n == 0 or n == 1:
        return n
    else:
        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

print(fibonacci_recursive(10))

def fibonacci(n):
    if n == 0 or n == 1:
        return n
    else:
        fib1, fib2 = 0, 1
        for i in range(2, n+1):
            fib = fib1 + fib2
            fib1, fib2 = fib2, fib
        return fib2

print(fibonacci(10))

# Zad 4

def power(*args, n):
    product = 1
    for number in args:
        product *= number ** n
    return product

result = power(1, 2, 3, 4, 5, n=2)
print(result)

# Zad 5

fruits = ['apple', 'banana', 'pomergranate', 'plum', 'orange', 'melon', 'cherry', 'watermelon']

selected_fruits_lengths = [len(fruit) for fruit in fruits if 'u' in fruit or 'o' in fruit]

print(selected_fruits_lengths)

# Zad 6

def newton_symbol(n, k):
    if k > n:
        return 0
    elif k == 0 or k == n:
        return 1
    else:
        x = 1
        for i in range(n-k+1, n+1):
            x *= i
        y = 1
        for i in range(1, k+1):
            y *= i
        return x // y

print(newton_symbol(6,4))

# Zad 7

class Polynomial:
    def __init__(self, coeffs):
        self.coeffs = coeffs

    def __add__(self, other):
        new_coeffs = []
        for i in range(max(len(self.coeffs), len(other.coeffs))):
            val1 = self.coeffs[i] if i < len(self.coeffs) else 0
            val2 = other.coeffs[i] if i < len(other.coeffs) else 0
            new_coeffs.append(val1 + val2)
        return Polynomial(new_coeffs)

    def __sub__(self, other):
        new_coeffs = []
        for i in range(max(len(self.coeffs), len(other.coeffs))):
            val1 = self.coeffs[i] if i < len(self.coeffs) else 0
            val2 = other.coeffs[i] if i < len(other.coeffs) else 0
            new_coeffs.append(val1 - val2)
        return Polynomial(new_coeffs)

    def __str__(self):
        result = ""
        for i in range(len(self.coeffs)):
            if self.coeffs[i] == 0:
                continue
            if i > 0 and self.coeffs[i] > 0:
                result += "+"
            if self.coeffs[i] != 1 or i == 0:
                result += str(self.coeffs[i])
            if i > 0:
                result += "x"
            if i > 1:
                result += "^" + str(i)
        return result

    def degree(self):
        return len(self.coeffs) - 1

    def __getitem__(self, i):
        return self.coeffs[i]

    def __setitem__(self, i, val):
        self.coeffs[i] = val

p1 = Polynomial([2, -1, 1]) 
p2 = Polynomial([1, 0, -3, 2]) 
p3 = p1 + p2
print(p3) 

p4 = p2 - p1
print(p4)

print(p1.degree())
print(p1[1])
p1[1] = 0
print(p1)  
